# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
export PATH="$PATH:/lib/systemd:/usr/local/bin:/usr/bin:/bin:/sbin:/usr/sbin"
export XDG_RUNTIME_DIR="/run/user/$(id -u)"
export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u)/bus"

# ~/.bashrc snippet to set CDK-related environment variables based on AWS CLI config/credentials
# This assumes a profile (defaults to 'default'); customize as needed.
# It parses ~/.aws/credentials and ~/.aws/config, and fetches account ID via STS.

# Function to parse AWS CLI files and set env vars
set_aws_cdk_env() {
    local PROFILE="${AWS_PROFILE:-default}"

    # Parse credentials file
    # Improved parsing of AWS CLI credentials file
    # Handles both "[default]" and "[profile default]" formats, parses within sections, and trims values.

    local CRED_FILE="$HOME/.aws/credentials"
    if [ -f "$CRED_FILE" ]; then
        export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id --profile "$PROFILE" || not-set)
        export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key --profile "$PROFILE" || not-set)
        export AWS_SESSION_TOKEN=$(aws configure get aws_session_token --profile "$PROFILE" || not-set)
    fi

    # Parse config file
    local CONFIG_FILE="$HOME/.aws/config"
    if [ -f "$CONFIG_FILE" ]; then
        export AWS_DEFAULT_REGION=$(awk -v profile="$PROFILE" '
BEGIN { in_section = 0 }
# Match profile headers: [default] or [profile default]
/^\[default\]$/ && profile == "default" { in_section = 1; next }
/^\[profile / && $2 == profile "]" { in_section = 1; next }
# End section on next header
/^\[/ { in_section = 0; next }
# Within section, find region
in_section && /^region[ \t]*=/ {
  sub(/^region[ \t]*=[ \t]*/, "");  # Remove key and equals
  print $0;  # Print the value
  exit;  # Exit after finding to avoid multiple matches
}
' "$CONFIG_FILE")
        export AWS_ENDPOINT_URL=$(awk -v profile="$PROFILE" '
BEGIN { in_section = 0 }
# Match profile headers: [default] or [profile default]
/^\[default\]$/ && profile == "default" { in_section = 1; next }
/^\[profile / && $2 == profile "]" { in_section = 1; next }
# End section on next header
/^\[/ { in_section = 0; next }
# Within section, find endpoint_url
in_section && /^endpoint_url[ \t]*=/ {
  sub(/^endpoint_url[ \t]*=[ \t]*/, "");  # Remove key and equals
  print $0;  # Print the value
  exit;  # Exit after finding to avoid multiple matches
}
' "$CONFIG_FILE")
    fi

    # Conditionally set service-specific endpoint if global is defined (required for cdklocal)
    if [ -n "${AWS_ENDPOINT_URL}" ]; then
        export AWS_ENDPOINT_URL_S3="${AWS_ENDPOINT_URL}"
    fi
    
    # Fetch account ID via STS (requires aws cli installed; falls back to mock if LocalStack detected)
    if command -v aws &> /dev/null; then
        export CDK_DEFAULT_ACCOUNT=$(aws sts get-caller-identity --query Account --output text 2>/dev/null || echo "000000000000")  # Mock if fails
    else
        export CDK_DEFAULT_ACCOUNT="000000000000"  # Default mock
    fi

    # Set CDK default region from AWS if not already set
    export CDK_DEFAULT_REGION="${AWS_DEFAULT_REGION:-us-east-1}"

    # Set LocalStack hostname:
    export LOCALSTACK_HOST="${LOCALSTACK_HOST:-localhost}"
    
    # Set LocalStack hostname:
    export LOCALSTACK_HOSTNAME="${LOCALSTACK_HOSTNAME:-localhost}"

    echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-(not set)}"

    # Set AWS profile name:
    export AWS_PROFILE="${AWS_PROFILE:-default}"

    # Optional: If LocalStack endpoint detected, set mock account explicitly
    #if [[ "$AWS_ENDPOINT_URL" == *"localhost"* || "$AWS_ENDPOINT_URL" == *"127.0.0.1"* ]]; then
    #    export CDK_DEFAULT_ACCOUNT="000000000000"
    #fi

    echo "AWS/CDK env vars set for profile AWS_PROFILE: '$AWS_PROFILE'"
    echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-(not set)}"
    echo "AWS_DEFAULT_REGION: $CDK_DEFAULT_REGION"
    echo "CDK_DEFAULT_ACCOUNT: $CDK_DEFAULT_ACCOUNT"
    echo "AWS_ENDPOINT_URL: ${AWS_ENDPOINT_URL:-http://localhost:4566}"
    echo "AWS_ENDPOINT_URL_S3: ${AWS_ENDPOINT_URL_S3}"
    echo "LOCALSTACK_HOST: ${LOCALSTACK_HOST:-localhost}"
}

# Call the function on shell start (or source manually)
set_aws_cdk_env

complete -C /usr/bin/tofu tofu
