# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
#umask 022

# if running bash
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
        . "$HOME/.bashrc"
    fi
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi
export PATH="$PATH:/lib/systemd:/usr/local/bin:/usr/bin:/bin:/sbin:/usr/sbin"
export XDG_RUNTIME_DIR="/run/user/$(id -u)"
export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u)/bus"

# ~/.profile snippet to set CDK-related environment variables based on AWS CLI config/credentials
# This assumes a profile (defaults to 'default'); customize as needed.
# It parses ~/.aws/credentials and ~/.aws/config, and fetches account ID via STS.

# Function to parse AWS CLI files and set env vars
set_aws_cdk_env() {
    local PROFILE="${AWS_PROFILE:-default}"

    # Parse credentials file
    # Improved parsing of AWS CLI credentials file
    # Handles both "[default]" and "[profile default]" formats, parses within sections, and trims values.

    local CRED_FILE="$HOME/.aws/credentials"
    if [ -f "$CRED_FILE" ]; then
        export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id --profile "$PROFILE")
        export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key --profile "$PROFILE")
        export AWS_SESSION_TOKEN=$(aws configure get aws_session_token --profile "$PROFILE")
    fi
    
    # Parse config file
    local CONFIG_FILE="$HOME/.aws/config"
    if [ -f "$CONFIG_FILE" ]; then
            export AWS_DEFAULT_REGION=$(awk -v profile="$PROFILE" '
BEGIN { in_section = 0 }
# Match profile headers: [default] or [profile default]
/^\[default\]$/ && profile == "default" { in_section = 1; next }
/^\[profile / && $2 == profile "]" { in_section = 1; next }
# End section on next header
/^\[/ { in_section = 0; next }
# Within section, find region
in_section && /^region[ \t]*=/ {
  sub(/^region[ \t]*=[ \t]*/, "");  # Remove key and equals
  print $0;  # Print the value
  exit;  # Exit after finding to avoid multiple matches
}
' "$CONFIG_FILE")
        export AWS_ENDPOINT_URL=$(awk -v profile="$PROFILE" '
BEGIN { in_section = 0 }
# Match profile headers: [default] or [profile default]
/^\[default\]$/ && profile == "default" { in_section = 1; next }
/^\[profile / && $2 == profile "]" { in_section = 1; next }
# End section on next header
/^\[/ { in_section = 0; next }
# Within section, find endpoint_url
in_section && /^endpoint_url[ \t]*=/ {
  sub(/^endpoint_url[ \t]*=[ \t]*/, "");  # Remove key and equals
  print $0;  # Print the value
  exit;  # Exit after finding to avoid multiple matches
}
' "$CONFIG_FILE")
    fi

    # Conditionally set service-specific endpoint if global is defined (required for cdklocal)
    if [ -n "${AWS_ENDPOINT_URL}" ]; then
        export AWS_ENDPOINT_URL_S3="${AWS_ENDPOINT_URL}"
    fi
    
    # Fetch account ID via STS (requires aws cli installed; falls back to mock if LocalStack detected)
    if command -v aws &> /dev/null; then
        export CDK_DEFAULT_ACCOUNT=$(aws sts get-caller-identity --query Account --output text 2>/dev/null || echo "000000000000")  # Mock if fails
    else
        export CDK_DEFAULT_ACCOUNT="000000000000"  # Default mock
    fi

    # Set CDK default region from AWS if not already set
    export CDK_DEFAULT_REGION="${AWS_DEFAULT_REGION:-us-east-1}"

    # Set LocalStack hostname:
    export LOCALSTACK_HOST="${LOCALSTACK_HOST:-localhost}"
    
    # Set LocalStack hostname:
    export LOCALSTACK_HOSTNAME="${LOCALSTACK_HOSTNAME:-localhost}"

    # Set AWS profile name:
    export AWS_PROFILE="${AWS_PROFILE:-default}"

    # Optional: If LocalStack endpoint detected, set mock account explicitly
    #if [[ "$AWS_ENDPOINT_URL" == *"localhost"* || "$AWS_ENDPOINT_URL" == *"127.0.0.1"* ]]; then
    #    export CDK_DEFAULT_ACCOUNT="000000000000"
    #fi

    echo "AWS/CDK env vars set for profile AWS_PROFILE: '$AWS_PROFILE'"
    echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-(not set)}"
    echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-(not set)}"
    echo "AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION"
    echo "CDK_DEFAULT_REGION: $CDK_DEFAULT_REGION"
    echo "CDK_DEFAULT_ACCOUNT: $CDK_DEFAULT_ACCOUNT"
    echo "AWS_ENDPOINT_URL: ${AWS_ENDPOINT_URL:-http://localhost:4566}"
    echo "AWS_ENDPOINT_URL_S3: ${AWS_ENDPOINT_URL_S3}"
    echo "LOCALSTACK_HOST: ${LOCALSTACK_HOST:-localhost}"
}

# Call the function on shell start (or source manually)
set_aws_cdk_env

complete -C /usr/bin/tofu tofu
source ~/.bashrc
